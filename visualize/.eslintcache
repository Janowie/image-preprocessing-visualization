[{"E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\index.js":"1","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\reportWebVitals.js":"2","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\App.js":"3","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\gui.js":"4","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\canvas\\canvas.js":"5","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\filters\\filters.js":"6","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\filters\\FiltersManager.js":"7","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\filters\\filtersArgs.js":"8","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\filters\\filtersSelect.js":"9","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\canvas\\kernel.js":"10","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\canvas\\canvases.js":"11","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\canvas\\kernels.js":"12"},{"size":517,"mtime":1610893920900,"results":"13","hashOfConfig":"14"},{"size":375,"mtime":1610893920901,"results":"15","hashOfConfig":"14"},{"size":203,"mtime":1611502417258,"results":"16","hashOfConfig":"14"},{"size":883,"mtime":1612351534313,"results":"17","hashOfConfig":"14"},{"size":1908,"mtime":1612350770778,"results":"18","hashOfConfig":"14"},{"size":2367,"mtime":1611608343906,"results":"19","hashOfConfig":"14"},{"size":2320,"mtime":1612367868697,"results":"20","hashOfConfig":"14"},{"size":1176,"mtime":1611608723101,"results":"21","hashOfConfig":"14"},{"size":1196,"mtime":1611608678894,"results":"22","hashOfConfig":"14"},{"size":4458,"mtime":1612477145705,"results":"23","hashOfConfig":"14"},{"size":6154,"mtime":1612477241071,"results":"24","hashOfConfig":"14"},{"size":1774,"mtime":1612476143492,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1iaugav",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"28"},"E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\index.js",[],["59","60"],"E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\reportWebVitals.js",[],"E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\App.js",[],"E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\gui.js",["61","62","63"],"import React from 'react';\r\nimport Canvas from './canvas/canvas.js';\r\nimport {Filters} from './filters/filters';\r\nimport Kernel from \"./canvas/kernel\";\r\n\r\nexport default function GUI(props) {\r\n\r\n  const [state, setState] = React.useState({\r\n    filtered_image: null,\r\n    canvas_dimensions: {}\r\n  });\r\n\r\n  const updateState = (key, value) => {\r\n    setState({\r\n      ...state,\r\n      [key]: value\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/*<Filters*/}\r\n      {/*  canvas_dimensions={state.canvas_dimensions}*/}\r\n      {/*  set_filtered_image={data => updateState('filtered_image', data)}*/}\r\n      {/*/>*/}\r\n      {/*<Canvas*/}\r\n      {/*  canvas_dimensions={state.canvas_dimensions}*/}\r\n      {/*  filtered_image={state.filtered_image}*/}\r\n      {/*  set_canvas_dimensions={data => updateState('canvas_dimensions', data)}*/}\r\n      {/*/>*/}\r\n      <Kernel/>\r\n    </div>\r\n  )\r\n}","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\canvas\\canvas.js",[],"E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\filters\\filters.js",["64","65","66","67"],"import React from 'react';\r\nimport {FormControl, InputLabel, Select, Input } from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FiltersManager} from './FiltersManager.js';\r\nimport FiltersArgs from './filtersArgs.js';\r\nimport FiltersSelect from './filtersSelect.js';\r\n\r\n\r\nexport const Filters = props => {\r\n\r\n  const { canvas_dimensions, set_filtered_image } = props;\r\n  const [state, setState] = React.useState({\r\n    filtersManager: null,\r\n    currentFilter: null\r\n  });\r\n  const image = document.querySelector(\".App .canvas-area > img\");\r\n\r\n  React.useEffect(() => {\r\n    if (state.filtersManager) {\r\n      state.filtersManager.setCanvasDimensions(canvas_dimensions);\r\n    }\r\n  }, [canvas_dimensions])\r\n\r\n  React.useEffect(() => {\r\n    if (state.filtersManager == null) {\r\n      setState({\r\n        ...state,\r\n        filtersManager: new FiltersManager()\r\n      })\r\n    }\r\n  }, [state.filters]);\r\n\r\n  const handleClick = () => {\r\n    if (state.currentFilter) {\r\n      filter(state.currentFilter.name, state.currentFilter.args);\r\n    }\r\n    else {\r\n      alert(\"No filter selected!\");\r\n    }\r\n  }\r\n\r\n  const updateState = (key, value) => {\r\n    setState({\r\n      ...state,\r\n      [key]: value\r\n    })\r\n  }\r\n\r\n  const updateFilterArg = data => {\r\n    updateState(\"currentFilter\", {\r\n          ...state.currentFilter,\r\n          args: {\r\n            ...state.currentFilter.args,\r\n            [data.name]: data.value\r\n          }\r\n        })\r\n  }\r\n\r\n  const filter = (filter, args) => {\r\n    if (state.filtersManager && image) {\r\n      let filtered_image = state.filtersManager.runFilter(image, filter, args)\r\n      set_filtered_image(filtered_image);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n\r\n      <h1>Filters</h1>\r\n\r\n      <FormControl variant=\"outlined\">\r\n        <InputLabel htmlFor=\"outlined-age-native-simple\">Filters</InputLabel>\r\n        <FiltersSelect\r\n          currentFilter={state.currentFilter}\r\n          setCurrentFilter={data => updateState('currentFilter', data)}\r\n          filters={state.filtersManager}\r\n        />\r\n      </FormControl>\r\n\r\n      <FiltersArgs\r\n        currentFilter={state.currentFilter}\r\n        setCurrentFilterArgs={updateFilterArg}\r\n      />\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n         color=\"primary\"\r\n        onClick={handleClick}\r\n      >Apply filter</Button>\r\n    </div>\r\n\r\n  )\r\n}\r\n","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\filters\\FiltersManager.js",[],"E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\filters\\filtersArgs.js",["68","69"],"import React from \"react\";\r\nimport {Input} from \"@material-ui/core\";\r\n\r\n\r\nexport default function FiltersArgs (props) {\r\n  const { currentFilter, setCurrentFilterArgs } = props;\r\n\r\n  React.useEffect(() => {\r\n    if (currentFilter && !currentFilter.args && currentFilter.settings.args) {\r\n      currentFilter.settings.args.map(arg => {\r\n        let fakeEvent = {\r\n          target: {\r\n            value: arg.value\r\n          }\r\n        }\r\n        handleChange(fakeEvent, arg);\r\n      })\r\n    }\r\n  }, [currentFilter])\r\n\r\n  const handleChange = (e, arg) => {\r\n    setCurrentFilterArgs({name: arg.name, value: e.target.value})\r\n  }\r\n\r\n  const getValue = (arg) => {\r\n    if (currentFilter && currentFilter.args && currentFilter.args[arg.name]) {\r\n      return currentFilter.args[arg.name].value;\r\n    }\r\n    return arg.value;\r\n  }\r\n\r\n  if (currentFilter && currentFilter.settings.args) {\r\n    return (\r\n      currentFilter.settings.args.map(arg => (\r\n        <Input\r\n          {...arg}\r\n          value={getValue(arg)}\r\n          onChange={e => handleChange(e, arg)}\r\n          key={`${arg.name}_${arg.type}`}\r\n        />\r\n      ))\r\n    )\r\n  }\r\n  else {\r\n    return null;\r\n  }\r\n\r\n}","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\filters\\filtersSelect.js",["70","71"],"import {Select} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst FiltersOptions = props => {\r\n  const {filters} = props;\r\n\r\n  if (filters) {\r\n    return (\r\n      Object.getOwnPropertyNames(filters)\r\n        .filter(p => p.indexOf(\"filter\") > -1)\r\n        .map(p => (\r\n          <option value={p} key={p}>\r\n            {(p\r\n              .substr(7, p.length)\r\n              .replaceAll(\"_\", \" \"))}\r\n          </option>\r\n        ))\r\n    )\r\n  }\r\n  else {\r\n    return <option value={null}></option>\r\n  }\r\n}\r\n\r\nexport default function FiltersSelect(props) {\r\n\r\n  const {filters, currentFilter, setCurrentFilter} = props;\r\n  const handleChange = event => {\r\n    setCurrentFilter({\r\n      \"name\": event.target.value,\r\n      \"settings\": filters.getSettings(event.target.value),\r\n      \"args\": null\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Select\r\n      native\r\n      value={currentFilter && currentFilter.name || \"\"}\r\n      onChange={handleChange}\r\n      label=\"Filter\"\r\n      inputProps={{\r\n        name: 'filter',\r\n        id: 'outlined-filter-native-simple',\r\n      }}\r\n    >\r\n      <option value={null}>Select filter</option>\r\n      <FiltersOptions filters={filters}/>\r\n    </Select>\r\n  )\r\n\r\n}","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\canvas\\kernel.js",["72","73"],"import React from \"react\";\r\nimport Canvases from \"./canvases\";\r\nimport KernelSettings from \"./kernels\";\r\n\r\n\r\nexport default function Kernel(props) {\r\n\r\n  let tick_counter = null;\r\n\r\n  const [state, setState] = React.useState({\r\n    \"interval\": null,\r\n    \"kernel_size\": 3,\r\n    \"kernel\": [ // Initialized with a gaussian blur\r\n        1/16, 1/8, 1/16,\r\n        1/8, 1/4, 1/8,\r\n        1/16, 1/8, 1/16\r\n    ],\r\n    \"pixel_size\": 18,\r\n    \"fps\": 100,\r\n    \"image\": new Image(),\r\n    \"background_color\": \"#e74c3c\",\r\n    \"canvas_height\": 640,\r\n    \"canvas_width\": 640,\r\n    \"tick_counter\": {\r\n        \"x\": 0,\r\n        \"y\": 0\r\n      }\r\n  })\r\n\r\n  const tick = () => {\r\n\r\n    if (!tick_counter) {\r\n      tick_counter = {\r\n        \"x\": 0,\r\n        \"y\": 0\r\n      }\r\n    }\r\n\r\n    let ticks_per_row = Math.floor(state.canvas_width / state.pixel_size) - Math.floor(state.kernel_size/2) + 2 - state.kernel_size;\r\n    let num_rows = Math.floor(state.canvas_height / state.pixel_size) + 2 - state.kernel_size;\r\n\r\n    // Stop at the end\r\n    if (tick_counter.y == num_rows - 1 && tick_counter.x == ticks_per_row) {\r\n      stopTick();\r\n      return null;\r\n    }\r\n\r\n    // Update position\r\n    if (tick_counter.x < ticks_per_row) {\r\n      tick_counter.x += 1;\r\n    }\r\n    else {\r\n      tick_counter.x = 0;\r\n      // Set y\r\n      if (tick_counter.y < num_rows) {\r\n        tick_counter.y += 1;\r\n      }\r\n    }\r\n\r\n    setState({\r\n      ...state,\r\n      \"tick_counter\": tick_counter\r\n    })\r\n\r\n  }\r\n\r\n  const stopTick = () => {\r\n    // Stop animation - set tick_counter\r\n    clearInterval(state.interval);\r\n    setState({\r\n      ...state,\r\n      \"interval\": null,\r\n      \"tick_counter\": tick_counter\r\n    })\r\n  }\r\n\r\n  const toggleAnimation = () => {\r\n    if (state.interval == null) {\r\n      // Reset tick counter\r\n      if (state.tick_counter)\r\n        tick_counter = state.tick_counter;\r\n      let interval = setInterval(tick, state.fps);\r\n      setState({\r\n        ...state,\r\n        \"interval\": interval\r\n      })\r\n    }\r\n    else\r\n      stopTick();\r\n  }\r\n\r\n  const handleClick = () => {\r\n    if (state.canvas_width && state.canvas_height) {\r\n      toggleAnimation();\r\n    }\r\n  }\r\n\r\n  const handleChange = (key, value) => {\r\n    setState({\r\n      ...state,\r\n      [key]: value\r\n    })\r\n  }\r\n\r\n  return (\r\n    <section className=\"container mario-canvas\">\r\n\r\n      <h1 className=\"mt-3 mb-4\">Filter visualization</h1>\r\n\r\n      <article className=\"controls mb-5\">\r\n\r\n        <h3>Options</h3>\r\n\r\n        <div className=\"form-group pt-3\">\r\n          <label htmlFor=\"background_color\" className=\"form-label\">Background color: </label>\r\n          <input type=\"color\" className=\"form-control\" id=\"background_color\"\r\n                 value={state.background_color}\r\n                 onChange={e => handleChange(e.target.id, e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group pt-3\">\r\n          <label htmlFor=\"pixel_size\" className=\"form-label\">Pixel size: </label>\r\n          <input type=\"number\" className=\"form-control\" id=\"pixel_size\"\r\n                 value={state.pixel_size}\r\n                 onChange={e =>\r\n                   handleChange(e.target.id, parseInt(e.target.value))\r\n                 }\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group pt-3\">\r\n          <label htmlFor=\"speed\" className=\"form-label\">Speed: </label>\r\n\r\n          <select\r\n            value={state.fps}\r\n            onChange={e => handleChange(\"fps\", parseInt(e.target.value))}\r\n            className=\"form-control\"\r\n            id=\"speed\"\r\n          >\r\n            <option value=\"500\">Slow</option>\r\n            <option value=\"100\">Normal</option>\r\n            <option value=\"16\">Fast</option>\r\n            <option value=\"0\">Ultra fast</option>\r\n          </select>\r\n\r\n        </div>\r\n\r\n        <KernelSettings\r\n          key=\"kernel_settings\"\r\n          kernel_size={state.kernel_size}\r\n          kernel={state.kernel}\r\n          setKernel={(val) => handleChange(\"kernel\", val)}\r\n        />\r\n\r\n\r\n        <button className=\"btn btn-primary mt-3\" onClick={handleClick}>Start / stop animation</button>\r\n      </article>\r\n\r\n      <Canvases\r\n        key=\"canvases\"\r\n        state={state}\r\n        kernel={state.kernel}\r\n        tick_counter={state.tick_counter}\r\n        // setCanvasDims={(h, w) => {\r\n        //   handleChange(\"canvas_height\", 640);\r\n        //   handleChange(\"canvas_width\", 640);\r\n        // }}\r\n      />\r\n\r\n\r\n    </section>\r\n  )\r\n}","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\canvas\\canvases.js",["74","75","76"],"import React from \"react\";\r\nimport Mario from \"../../static/mario_bg.png\";\r\nimport {dot} from \"mathjs\";\r\n\r\nexport default function Canvases(props) {\r\n\r\n  const canvas = React.useRef(null);\r\n  const canvas_output = React.useRef(null);\r\n\r\n  const [state, setState] = React.useState({\r\n    \"ctx\": null,\r\n    \"ctx_output\": null,\r\n  })\r\n\r\n  // Initialize state\r\n  React.useEffect(() => {\r\n    if (canvas && canvas_output) {\r\n      props.state.image.crossOrigin = 'anonymous';\r\n      props.state.image.src = Mario;\r\n      props.state.image.onload = () => {\r\n\r\n        initCanvases();\r\n\r\n        setState({\r\n          ...state,\r\n          \"ctx\": canvas.current.getContext(\"2d\"),\r\n          \"ctx_output\": canvas_output.current.getContext(\"2d\")\r\n        });\r\n\r\n        // console.log(canvas.current.height, canvas.current.width);\r\n        // props.setCanvasDims(640,640);\r\n      }\r\n    }\r\n  }, [canvas, canvas_output])\r\n\r\n  React.useEffect(() => {\r\n    if (state.ctx) {\r\n      drawKernel(0, 0);\r\n    }\r\n  }, [state.ctx])\r\n\r\n  React.useEffect(() => {\r\n    if (\r\n      props.state.interval == null && props.state.pixel_size > 0\r\n    ) {\r\n      initCanvases();\r\n    }\r\n  }, [props.state.pixel_size, props.state.background_color])\r\n\r\n  React.useEffect(() => {\r\n    if (props.tick_counter) {\r\n      draw();\r\n    }\r\n  })\r\n\r\n  // ###########################################################################################\r\n  // ## METHODS\r\n  // ###########################################################################################\r\n\r\n  const drawLine = (ctx, f_x, f_y, t_x, t_y) => {\r\n    ctx.beginPath();\r\n    ctx.moveTo(f_x, f_y);\r\n    ctx.lineTo(t_x, t_y);\r\n    ctx.strokeStyle = 'rgba(182,182,182,0.5)';\r\n    if (props.state.pixel_size < 3)\r\n      ctx.strokeStyle = 'rgba(182,182,182,0.01)';\r\n    ctx.stroke();\r\n  }\r\n\r\n  const drawPixels = (canvas) => {\r\n    let ctx = canvas.getContext(\"2d\");\r\n    for (let row = 0; row < canvas.height; row += props.state.pixel_size) {\r\n      drawLine(ctx, 0, row, canvas.width, row);\r\n      drawLine(ctx, row, 0, row, canvas.height);\r\n    }\r\n  }\r\n\r\n  const drawBackgroundImage = (canvas) => {\r\n\r\n    let ctx = canvas.getContext(\"2d\");\r\n    let offset = props.state.pixel_size;\r\n\r\n    // Draw background\r\n    ctx.fillStyle = props.state.background_color;\r\n    ctx.fillRect(0, 0, 1000, 1000);\r\n\r\n    // Draw image\r\n    ctx.drawImage(props.state.image, offset, offset, canvas.height-offset*2, canvas.width-offset*2);\r\n    drawPixels(canvas);\r\n\r\n  }\r\n\r\n  const initCanvases = () => {\r\n    drawBackgroundImage(canvas.current);\r\n    let ctx_output = canvas_output.current.getContext('2d');\r\n    // Draw background\r\n    ctx_output.fillStyle = props.state.background_color;\r\n    ctx_output.fillRect(0, 0, 1000, 1000);\r\n    drawPixels(canvas_output.current);\r\n  }\r\n\r\n  const getPixel = (x, y) => {\r\n    if (state.ctx) {\r\n      let pixel = state.ctx.getImageData(x, y, 1, 1);\r\n      let data = pixel.data;\r\n\r\n      return data;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  const drawOutputPixel = (x, y, color) => {\r\n    if (state.ctx_output) {\r\n      state.ctx_output.fillStyle = color;\r\n      state.ctx_output.fillRect(x, y, props.state.pixel_size, props.state.pixel_size);\r\n    }\r\n  }\r\n\r\n  const split_channels = (values) => {\r\n    let r = [];\r\n    let g = [];\r\n    let b = [];\r\n    let a = [];\r\n\r\n    for (let i = 0; i < values.length; i++) {\r\n      r.push(values[i][0]);\r\n      g.push(values[i][1]);\r\n      b.push(values[i][2]);\r\n      a.push(values[i][3]);\r\n    }\r\n\r\n    return [r, g, b, a];\r\n  }\r\n\r\n  const filter_conv = (x, y, values) => {\r\n\r\n    let kernel = props.kernel;\r\n    let v = split_channels(values);\r\n\r\n    let color = `rgba(${dot(v[0], kernel)},${dot(v[1], kernel)},${dot(v[2], kernel)},255)`;\r\n    // let color = `rgba(${v[0][4]},${v[1][4]},${v[2][4]},255)`;\r\n    // console.log(\"color\", color);\r\n\r\n    return color;\r\n  }\r\n\r\n  const drawKernel = (x, y) => {\r\n\r\n    let border_width = 1;\r\n    let size = props.state.kernel_size * props.state.pixel_size - border_width;\r\n    let dot_size = 2;\r\n\r\n    state.ctx.fillStyle = \"rgba(44, 62, 80,0.5)\";\r\n    state.ctx.fillRect(x, y, size, size);\r\n    state.ctx.strokeStyle = \"rgba(241, 196, 15,1.0)\";\r\n    state.ctx.strokeRect(x, y, size, size);\r\n\r\n    for (let j = 0; j < props.state.kernel_size; j++) {\r\n      for (let i = 0; i < props.state.kernel_size; i++) {\r\n        if (i === 1 && j === 1) {\r\n          dot_size = 6\r\n        }\r\n        else {\r\n          dot_size = 2\r\n        }\r\n          state.ctx.fillRect((x + props.state.pixel_size / 2) + props.state.pixel_size * i - dot_size/2, (y + props.state.pixel_size / 2) + props.state.pixel_size * j - dot_size/2, dot_size, dot_size);\r\n      }\r\n    }\r\n  }\r\n\r\n  const getKernelValues = (x, y) => {\r\n    let values = [];\r\n    for (let j = 0; j < props.state.kernel_size; j++) {\r\n      for (let i = 0; i < props.state.kernel_size; i++) {\r\n        values.push(getPixel((x + props.state.pixel_size / 2) + props.state.pixel_size * i, (y + props.state.pixel_size / 2) + props.state.pixel_size * j))\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  const draw = () => {\r\n\r\n    if (!state.ctx) {\r\n      return null;\r\n    }\r\n\r\n    let x = props.tick_counter.x * props.state.pixel_size;\r\n    let y = props.tick_counter.y * props.state.pixel_size;\r\n\r\n    // Original canvas\r\n    drawBackgroundImage(canvas.current);\r\n    let values = getKernelValues(x, y);\r\n    drawKernel(x, y);\r\n\r\n    // Output canvas\r\n    drawOutputPixel(x + props.state.pixel_size, y + props.state.pixel_size, filter_conv(x, y, values));\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"row mb-5\">\r\n      <div className=\"col-lg-6 col-md-12 col-sm-12\">\r\n        <h3> Original </h3>\r\n        <canvas\r\n          ref={canvas}\r\n          width=\"640\"\r\n          height=\"640\"\r\n        >\r\n          Your browser does not support the HTML5 canvas tag.\r\n        </canvas>\r\n      </div>\r\n      <div className=\"col-lg-6 col-md-12 col-sm-12\">\r\n        <h3> Filtered </h3>\r\n        <canvas\r\n          ref={canvas_output}\r\n          width=\"640\"\r\n          height=\"640\"\r\n        >\r\n          Your browser does not support the HTML5 canvas tag.\r\n        </canvas>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}",["77","78"],"E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\canvas\\kernels.js",["79"],"import React from \"react\";\r\n\r\nexport default function KernelSettings(props) {\r\n\r\n  const [kernel, setKernel] = React.useState(null)\r\n\r\n  React.useEffect(() => {\r\n\r\n    if (kernel === null) {\r\n      if (props.kernel.length) {\r\n        setKernel(props.kernel);\r\n      }\r\n      else {\r\n        let new_kernel = []\r\n        for (let i = 0; i < Math.pow(props.kernel_size, 2); i++) {\r\n          new_kernel.push(0);\r\n        }\r\n        setKernel(new_kernel);\r\n      }\r\n    }\r\n\r\n  })\r\n\r\n\r\n  const handleChange = (e, index) => {\r\n    let new_kernel = kernel;\r\n    new_kernel[index] = parseFloat(e.target.value);\r\n    props.setKernel(new_kernel);\r\n    setKernel(new_kernel);\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-group pt-3\">\r\n      <br/>\r\n      <p>Kernel</p>\r\n      {\r\n        (kernel &&\r\n      kernel.map((val, index) => {\r\n        if (index > 0 && index % props.kernel_size === 0)\r\n          return (\r\n            <React.Fragment\r\n              key={`kernel_input_fragment_${index.toString()}`}\r\n            >\r\n              <br key={`kernel_input_br_${index.toString()}`}/>\r\n              <input\r\n                key={`kernel_input_${index.toString()}`}\r\n                name={`kernel_input_${index.toString()}`}\r\n                type=\"text\"\r\n                value={val || 0}\r\n                onChange={(e) => handleChange(e, index)}\r\n                size=\"3\" />\r\n            </React.Fragment>\r\n          )\r\n        else\r\n          return (\r\n            <input\r\n              key={`kernel_input_${index.toString()}`}\r\n              name={`kernel_input_${index.toString()}`}\r\n              type=\"text\"\r\n              value={val || 0}\r\n              onChange={(e) => handleChange(e, index)}\r\n              size=\"3\" />\r\n          )\r\n      })\r\n        )}\r\n\r\n    </div>\r\n  )\r\n}",{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":2,"column":8,"nodeType":"86","messageId":"87","endLine":2,"endColumn":14},{"ruleId":"84","severity":1,"message":"88","line":3,"column":9,"nodeType":"86","messageId":"87","endLine":3,"endColumn":16},{"ruleId":"84","severity":1,"message":"89","line":13,"column":9,"nodeType":"86","messageId":"87","endLine":13,"endColumn":20},{"ruleId":"84","severity":1,"message":"90","line":2,"column":34,"nodeType":"86","messageId":"87","endLine":2,"endColumn":40},{"ruleId":"84","severity":1,"message":"91","line":2,"column":42,"nodeType":"86","messageId":"87","endLine":2,"endColumn":47},{"ruleId":"92","severity":1,"message":"93","line":22,"column":6,"nodeType":"94","endLine":22,"endColumn":25,"suggestions":"95"},{"ruleId":"92","severity":1,"message":"96","line":31,"column":6,"nodeType":"94","endLine":31,"endColumn":21,"suggestions":"97"},{"ruleId":"98","severity":1,"message":"99","line":10,"column":43,"nodeType":"100","messageId":"101","endLine":10,"endColumn":45},{"ruleId":"92","severity":1,"message":"102","line":19,"column":6,"nodeType":"94","endLine":19,"endColumn":21,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":39,"column":28,"nodeType":"106","messageId":"107","endLine":39,"endColumn":30},{"ruleId":"104","severity":1,"message":"105","line":39,"column":50,"nodeType":"106","messageId":"107","endLine":39,"endColumn":52},{"ruleId":"108","severity":1,"message":"109","line":43,"column":24,"nodeType":"110","messageId":"111","endLine":43,"endColumn":26},{"ruleId":"108","severity":1,"message":"109","line":43,"column":58,"nodeType":"110","messageId":"111","endLine":43,"endColumn":60},{"ruleId":"92","severity":1,"message":"112","line":34,"column":6,"nodeType":"94","endLine":34,"endColumn":29,"suggestions":"113"},{"ruleId":"92","severity":1,"message":"114","line":40,"column":6,"nodeType":"94","endLine":40,"endColumn":17,"suggestions":"115"},{"ruleId":"92","severity":1,"message":"116","line":48,"column":6,"nodeType":"94","endLine":48,"endColumn":60,"suggestions":"117"},{"ruleId":"80","replacedBy":"118"},{"ruleId":"82","replacedBy":"119"},{"ruleId":"92","severity":1,"message":"120","line":7,"column":3,"nodeType":"121","endLine":7,"endColumn":18,"suggestions":"122"},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'Canvas' is defined but never used.","Identifier","unusedVar","'Filters' is defined but never used.","'updateState' is assigned a value but never used.","'Select' is defined but never used.","'Input' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'state.filtersManager'. Either include it or remove the dependency array.","ArrayExpression",["125"],"React Hook React.useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["126"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook React.useEffect has a missing dependency: 'handleChange'. Either include it or remove the dependency array.",["127"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook React.useEffect has missing dependencies: 'initCanvases', 'props.state.image', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["128"],"React Hook React.useEffect has a missing dependency: 'drawKernel'. Either include it or remove the dependency array.",["129"],"React Hook React.useEffect has missing dependencies: 'initCanvases' and 'props.state.interval'. Either include them or remove the dependency array.",["130"],["123"],["124"],"React Hook useEffect contains a call to 'setKernel'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [kernel, props.kernel, props.kernel_size] as a second argument to the useEffect Hook.","MemberExpression",["131"],"no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},"Update the dependencies array to be: [canvas_dimensions, state.filtersManager]",{"range":"146","text":"147"},"Update the dependencies array to be: [state, state.filters]",{"range":"148","text":"149"},"Update the dependencies array to be: [currentFilter, handleChange]",{"range":"150","text":"151"},"Update the dependencies array to be: [canvas, canvas_output, initCanvases, props.state.image, state]",{"range":"152","text":"153"},"Update the dependencies array to be: [drawKernel, state.ctx]",{"range":"154","text":"155"},"Update the dependencies array to be: [props.state.pixel_size, props.state.background_color, props.state.interval, initCanvases]",{"range":"156","text":"157"},"Add dependencies array: [kernel, props.kernel, props.kernel_size]",{"range":"158","text":"159"},[715,734],"[canvas_dimensions, state.filtersManager]",[912,927],"[state, state.filters]",[499,514],"[currentFilter, handleChange]",[885,908],"[canvas, canvas_output, initCanvases, props.state.image, state]",[999,1010],"[drawKernel, state.ctx]",[1162,1216],"[props.state.pixel_size, props.state.background_color, props.state.interval, initCanvases]",[475,475],", [kernel, props.kernel, props.kernel_size]"]