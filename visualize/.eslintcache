[{"E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\index.js":"1","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\reportWebVitals.js":"2","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\App.js":"3","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\gui.js":"4","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\canvases.js":"5","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\kernels.js":"6"},{"size":517,"mtime":1610893920900,"results":"7","hashOfConfig":"8"},{"size":375,"mtime":1610893920901,"results":"9","hashOfConfig":"8"},{"size":738,"mtime":1612517649025,"results":"10","hashOfConfig":"8"},{"size":5931,"mtime":1612525470058,"results":"11","hashOfConfig":"8"},{"size":6277,"mtime":1612525707585,"results":"12","hashOfConfig":"8"},{"size":1156,"mtime":1612520106601,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1iaugav",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\index.js",[],["30","31"],"E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\reportWebVitals.js",[],"E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\App.js",["32"],"import './App.css';\r\nimport Mario from \"./static/mario.png\";\r\n\r\n// Component imports\r\nimport GUI from \"./components/gui.js\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <nav className=\"navbar navbar-light bg-light container-paddings\">\r\n        <div className=\"container\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            <img\r\n              src={Mario}\r\n              width=\"30\"\r\n              height=\"30\"\r\n              className=\"d-inline-block align-top\"\r\n              style={{\r\n                \"marginRight\": \"15px\"\r\n              }}\r\n              alt=\"Mario\"/>\r\n                Visualize\r\n          </a>\r\n        </div>\r\n      </nav>\r\n\r\n      <GUI />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\gui.js",["33","34"],"import React from \"react\";\r\nimport Canvases from \"./canvases\";\r\nimport KernelSettings from \"./kernels\";\r\n\r\nimport './canvas.css';\r\n\r\n\r\nexport default function GUI(props) {\r\n\r\n  let tick_counter = null;\r\n  let interval = null;\r\n\r\n  const [state, setState] = React.useState({\r\n    \"interval\": null,\r\n    \"kernel_size\": 3,\r\n    \"kernel\": [ // Initialized with a gaussian blur\r\n        1/16, 1/8, 1/16,\r\n        1/8, 1/4, 1/8,\r\n        1/16, 1/8, 1/16\r\n    ],\r\n    \"pixel_size\": 20,\r\n    \"fps\": 100,\r\n    \"image\": new Image(),\r\n    \"background_color\": \"#e74c3c\",\r\n    \"canvas_height\": 640,\r\n    \"canvas_width\": 640,\r\n    \"tick_counter\": {\r\n        \"x\": 0,\r\n        \"y\": 0\r\n    },\r\n    \"reset\": false\r\n  });\r\n\r\n  const tick = () => {\r\n\r\n    // // Wait until interval initialized\r\n    // if (interval === null) {\r\n    //   return null;\r\n    // }\r\n\r\n    if (!tick_counter) {\r\n      tick_counter = {\r\n        \"x\": 0,\r\n        \"y\": 0\r\n      }\r\n    }\r\n\r\n    let ticks_per_row = Math.floor(state.canvas_width / state.pixel_size) - state.kernel_size; // 2*Math.floor(state.kernel_size/2);\r\n    let num_rows = Math.floor(state.canvas_height / state.pixel_size) - state.kernel_size;\r\n\r\n    // Stop at the end\r\n    if (tick_counter.y == num_rows && tick_counter.x == ticks_per_row) {\r\n      stopTick();\r\n      return null;\r\n    }\r\n\r\n    // Update position\r\n    if (tick_counter.x < ticks_per_row) {\r\n      tick_counter.x += 1;\r\n    }\r\n    else {\r\n      tick_counter.x = 0;\r\n      // Set y\r\n      if (tick_counter.y < num_rows) {\r\n        tick_counter.y += 1;\r\n      }\r\n    }\r\n\r\n    setState({\r\n      ...state,\r\n      \"tick_counter\": tick_counter,\r\n      \"interval\": interval\r\n    })\r\n\r\n  }\r\n\r\n  const reset = () => {\r\n    tick_counter = null;\r\n    setState({\r\n      ...state,\r\n      \"interval\": null,\r\n      \"tick_counter\": {\r\n        \"x\": 0,\r\n        \"y\": 0\r\n      },\r\n      \"reset\": true\r\n    })\r\n  }\r\n\r\n  const stopTick = () => {\r\n    // Stop animation - set tick_counter\r\n    clearInterval(state.interval);\r\n    setState({\r\n      ...state,\r\n      \"interval\": null,\r\n      \"reset\": false\r\n    })\r\n  }\r\n\r\n  const toggleAnimation = () => {\r\n    if (state.interval == null) {\r\n      // Reset tick counter\r\n      if (state.tick_counter)\r\n        tick_counter = state.tick_counter;\r\n      interval = setInterval(() => tick(), state.fps);\r\n      setState({\r\n        ...state,\r\n        \"interval\": interval,\r\n        \"reset\": false\r\n      })\r\n    }\r\n    else\r\n      stopTick();\r\n  }\r\n\r\n  const handleClick = () => {\r\n    if (state.canvas_width && state.canvas_height) {\r\n      toggleAnimation();\r\n    }\r\n  }\r\n\r\n  const handleChange = (key, value) => {\r\n    setState({\r\n      ...state,\r\n      [key]: value\r\n    })\r\n  }\r\n\r\n  return (\r\n    <section className=\"container mario-canvas\">\r\n\r\n      <h1 className=\"mt-3 mb-4\">Filter visualization</h1>\r\n\r\n      <article className=\"controls mb-5\">\r\n\r\n        <h3>Settings</h3>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-6\">\r\n            <KernelSettings\r\n              key=\"kernel_settings\"\r\n              kernel_size={state.kernel_size}\r\n              kernel={state.kernel}\r\n              setKernel={(val) => handleChange(\"kernel\", val)}\r\n            />\r\n          </div>\r\n          <div className=\"col-lg-6\">\r\n            <div className=\"row\">\r\n\r\n              <div className=\"form-group pt-3 col-lg-4\">\r\n                <label htmlFor=\"background_color\" className=\"form-label\">Background color: </label>\r\n                <input type=\"color\" className=\"form-control\" id=\"background_color\"\r\n                       value={state.background_color}\r\n                       onChange={e => handleChange(e.target.id, e.target.value)}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group pt-3 col-lg-4\">\r\n                <label htmlFor=\"pixel_size\" className=\"form-label\">Pixel size: </label>\r\n                <input type=\"number\" className=\"form-control\" id=\"pixel_size\"\r\n                       value={state.pixel_size}\r\n                       onChange={e =>\r\n                         handleChange(e.target.id, parseInt(e.target.value))\r\n                       }\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group pt-3 col-lg-4\">\r\n                <label htmlFor=\"speed\" className=\"form-label\">Speed: </label>\r\n\r\n                <select\r\n                  value={state.fps}\r\n                  onChange={e => handleChange(\"fps\", parseInt(e.target.value))}\r\n                  className=\"form-control\"\r\n                  id=\"speed\"\r\n                >\r\n                  <option value=\"500\">Slow</option>\r\n                  <option value=\"100\">Normal</option>\r\n                  <option value=\"16\">Fast</option>\r\n                  <option value=\"0\">Ultra fast</option>\r\n                </select>\r\n\r\n              </div>\r\n\r\n            </div>\r\n\r\n\r\n            <button\r\n              className=\"btn btn-primary mt-4 btn-lg\"\r\n              onClick={handleClick}\r\n              style={{\r\n                \"backgroundColor\": state.background_color\r\n              }}\r\n            >\r\n              {(state.interval ? \"Stop!\" : \"GO!\")}\r\n            </button>\r\n\r\n            {(state.interval === null &&\r\n            <button\r\n              className=\"btn btn-outline-primary mt-4 btn-lg d-inline-block ml-3 \"\r\n              onClick={reset}\r\n              style={{\r\n                \"borderColor\": state.background_color,\r\n                \"color\": state.background_color\r\n              }}\r\n            >\r\n              Reset\r\n            </button>)}\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n      </article>\r\n\r\n      <Canvases\r\n        key=\"canvases\"\r\n        state={state}\r\n        kernel={state.kernel}\r\n        tick_counter={state.tick_counter}\r\n        // setCanvasDims={(h, w) => {\r\n        //   handleChange(\"canvas_height\", 640);\r\n        //   handleChange(\"canvas_width\", 640);\r\n        // }}\r\n      />\r\n\r\n\r\n    </section>\r\n  )\r\n}","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\canvases.js",["35","36","37","38"],"import React from \"react\";\r\nimport {dot} from \"mathjs\";\r\nimport Mario from \"../static/mario_bg.png\";\r\n\r\nexport default function Canvases(props) {\r\n\r\n  const canvas = React.useRef(null);\r\n  const canvas_output = React.useRef(null);\r\n\r\n  const [state, setState] = React.useState({\r\n    \"ctx\": null,\r\n    \"ctx_output\": null,\r\n  })\r\n\r\n  // Initialize state\r\n  React.useEffect(() => {\r\n    if (canvas && canvas_output) {\r\n      props.state.image.crossOrigin = 'anonymous';\r\n      props.state.image.src = Mario;\r\n      props.state.image.onload = () => {\r\n\r\n        initCanvases();\r\n\r\n        setState({\r\n          ...state,\r\n          \"ctx\": canvas.current.getContext(\"2d\"),\r\n          \"ctx_output\": canvas_output.current.getContext(\"2d\")\r\n        });\r\n\r\n        // console.log(canvas.current.height, canvas.current.width);\r\n        // props.setCanvasDims(640,640);\r\n      }\r\n    }\r\n  }, [canvas, canvas_output])\r\n\r\n  React.useEffect(() => {\r\n    if (state.ctx) {\r\n      drawKernel(0, 0);\r\n    }\r\n  }, [state.ctx])\r\n\r\n  React.useEffect(() => {\r\n    if (\r\n      props.state.interval == null && props.state.pixel_size > 0\r\n    ) {\r\n      initCanvases();\r\n    }\r\n  }, [props.state.pixel_size, props.state.background_color])\r\n\r\n  React.useEffect(() => {\r\n    if (props.tick_counter) {\r\n      draw();\r\n    }\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    if (props.state.reset) {\r\n      initCanvases();\r\n      draw();\r\n    }\r\n  }, [props.state.reset])\r\n\r\n  // ###########################################################################################\r\n  // ## METHODS\r\n  // ###########################################################################################\r\n\r\n  const drawLine = (ctx, f_x, f_y, t_x, t_y) => {\r\n    ctx.beginPath();\r\n    ctx.moveTo(f_x, f_y);\r\n    ctx.lineTo(t_x, t_y);\r\n    ctx.strokeStyle = 'rgba(182,182,182,0.5)';\r\n    if (props.state.pixel_size < 3)\r\n      ctx.strokeStyle = 'rgba(182,182,182,0.01)';\r\n    ctx.stroke();\r\n  }\r\n\r\n  const drawPixels = (canvas) => {\r\n    let ctx = canvas.getContext(\"2d\");\r\n    for (let row = 0; row < canvas.height; row += props.state.pixel_size) {\r\n      drawLine(ctx, 0, row, canvas.width, row);\r\n      drawLine(ctx, row, 0, row, canvas.height);\r\n    }\r\n  }\r\n\r\n  const drawBackgroundImage = (canvas) => {\r\n\r\n    let ctx = canvas.getContext(\"2d\");\r\n    let offset = props.state.pixel_size;\r\n\r\n    // Draw background\r\n    ctx.fillStyle = props.state.background_color;\r\n    ctx.fillRect(0, 0, 1000, 1000);\r\n\r\n    // Draw image\r\n    ctx.drawImage(props.state.image, offset, offset, canvas.height-offset*2, canvas.width-offset*2);\r\n    drawPixels(canvas);\r\n\r\n  }\r\n\r\n  const initCanvases = () => {\r\n    drawBackgroundImage(canvas.current);\r\n    let ctx_output = canvas_output.current.getContext('2d');\r\n    // Draw background\r\n    ctx_output.fillStyle = props.state.background_color;\r\n    ctx_output.fillRect(0, 0, 1000, 1000);\r\n    drawPixels(canvas_output.current);\r\n  }\r\n\r\n  const getPixel = (x, y) => {\r\n    if (state.ctx) {\r\n      let pixel = state.ctx.getImageData(x, y, 1, 1);\r\n      let data = pixel.data;\r\n\r\n      return data;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  const drawOutputPixel = (x, y, color) => {\r\n    if (state.ctx_output) {\r\n      state.ctx_output.fillStyle = color;\r\n      state.ctx_output.fillRect(x, y, props.state.pixel_size, props.state.pixel_size);\r\n    }\r\n  }\r\n\r\n  const split_channels = (values) => {\r\n    let r = [];\r\n    let g = [];\r\n    let b = [];\r\n    let a = [];\r\n\r\n    for (let i = 0; i < values.length; i++) {\r\n      r.push(values[i][0]);\r\n      g.push(values[i][1]);\r\n      b.push(values[i][2]);\r\n      a.push(values[i][3]);\r\n    }\r\n\r\n    return [r, g, b, a];\r\n  }\r\n\r\n  const filter_conv = (x, y, values) => {\r\n\r\n    let kernel = props.kernel;\r\n    let v = split_channels(values);\r\n\r\n    let color = \"rgba(255,255,255,0)\";\r\n    try {\r\n      color = `rgba(${dot(v[0], kernel)},${dot(v[1], kernel)},${dot(v[2], kernel)},255)`;\r\n    }\r\n    catch (err) {\r\n      // ERROR !\r\n    }\r\n    return color;\r\n  }\r\n\r\n  const drawKernel = (x, y) => {\r\n\r\n    let border_width = 1;\r\n    let size = props.state.kernel_size * props.state.pixel_size - border_width;\r\n    let dot_size = 2;\r\n\r\n    state.ctx.fillStyle = \"rgba(44, 62, 80,0.5)\";\r\n    state.ctx.fillRect(x, y, size, size);\r\n    state.ctx.strokeStyle = \"rgba(241, 196, 15,1.0)\";\r\n    state.ctx.strokeRect(x, y, size, size);\r\n\r\n    for (let j = 0; j < props.state.kernel_size; j++) {\r\n      for (let i = 0; i < props.state.kernel_size; i++) {\r\n        if (i === 1 && j === 1) {\r\n          dot_size = 6\r\n        }\r\n        else {\r\n          dot_size = 2\r\n        }\r\n          state.ctx.fillRect((x + props.state.pixel_size / 2) + props.state.pixel_size * i - dot_size/2, (y + props.state.pixel_size / 2) + props.state.pixel_size * j - dot_size/2, dot_size, dot_size);\r\n      }\r\n    }\r\n  }\r\n\r\n  const getKernelValues = (x, y) => {\r\n    let values = [];\r\n    for (let j = 0; j < props.state.kernel_size; j++) {\r\n      for (let i = 0; i < props.state.kernel_size; i++) {\r\n        values.push(getPixel((x + props.state.pixel_size / 2) + props.state.pixel_size * i, (y + props.state.pixel_size / 2) + props.state.pixel_size * j))\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  const draw = () => {\r\n\r\n    if (!state.ctx) {\r\n      return null;\r\n    }\r\n\r\n    let x = props.tick_counter.x * props.state.pixel_size;\r\n    let y = props.tick_counter.y * props.state.pixel_size;\r\n\r\n    // Original canvas\r\n    drawBackgroundImage(canvas.current);\r\n    let values = getKernelValues(x, y);\r\n    drawKernel(x, y);\r\n\r\n    // Output canvas\r\n    drawOutputPixel(x + props.state.pixel_size, y + props.state.pixel_size, filter_conv(x, y, values));\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"row mb-5\">\r\n      <div className=\"col-lg-6 col-md-12 col-sm-12\">\r\n        <h3> Original </h3>\r\n        <canvas\r\n          ref={canvas}\r\n          width=\"640\"\r\n          height=\"640\"\r\n        >\r\n          Your browser does not support the HTML5 canvas tag.\r\n        </canvas>\r\n      </div>\r\n      <div className=\"col-lg-6 col-md-12 col-sm-12\">\r\n        <h3> Filtered </h3>\r\n        <canvas\r\n          ref={canvas_output}\r\n          width=\"640\"\r\n          height=\"640\"\r\n        >\r\n          Your browser does not support the HTML5 canvas tag.\r\n        </canvas>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}","E:\\Skola\\Visualization\\image-preprocessing-visualization\\visualize\\src\\components\\kernels.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":12,"column":11,"nodeType":"45","endLine":12,"endColumn":48},{"ruleId":"46","severity":1,"message":"47","line":52,"column":24,"nodeType":"48","messageId":"49","endLine":52,"endColumn":26},{"ruleId":"46","severity":1,"message":"47","line":52,"column":54,"nodeType":"48","messageId":"49","endLine":52,"endColumn":56},{"ruleId":"50","severity":1,"message":"51","line":34,"column":6,"nodeType":"52","endLine":34,"endColumn":29,"suggestions":"53"},{"ruleId":"50","severity":1,"message":"54","line":40,"column":6,"nodeType":"52","endLine":40,"endColumn":17,"suggestions":"55"},{"ruleId":"50","severity":1,"message":"56","line":48,"column":6,"nodeType":"52","endLine":48,"endColumn":60,"suggestions":"57"},{"ruleId":"50","severity":1,"message":"58","line":61,"column":6,"nodeType":"52","endLine":61,"endColumn":25,"suggestions":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'initCanvases', 'props.state.image', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.","ArrayExpression",["62"],"React Hook React.useEffect has a missing dependency: 'drawKernel'. Either include it or remove the dependency array.",["63"],"React Hook React.useEffect has missing dependencies: 'initCanvases' and 'props.state.interval'. Either include them or remove the dependency array.",["64"],"React Hook React.useEffect has missing dependencies: 'draw' and 'initCanvases'. Either include them or remove the dependency array.",["65"],"no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},"Update the dependencies array to be: [canvas, canvas_output, initCanvases, props.state.image, state]",{"range":"74","text":"75"},"Update the dependencies array to be: [drawKernel, state.ctx]",{"range":"76","text":"77"},"Update the dependencies array to be: [props.state.pixel_size, props.state.background_color, props.state.interval, initCanvases]",{"range":"78","text":"79"},"Update the dependencies array to be: [draw, initCanvases, props.state.reset]",{"range":"80","text":"81"},[882,905],"[canvas, canvas_output, initCanvases, props.state.image, state]",[996,1007],"[drawKernel, state.ctx]",[1159,1213],"[props.state.pixel_size, props.state.background_color, props.state.interval, initCanvases]",[1413,1432],"[draw, initCanvases, props.state.reset]"]